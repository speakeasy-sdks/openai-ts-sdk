/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * The function that the model called.
 */
export class FunctionT extends SpeakeasyBase {
    /**
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "arguments" })
    arguments: string;

    /**
     * The name of the function to call.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;
}

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export enum TypeT {
    Function = "function",
}

export class ChatCompletionMessageToolCall extends SpeakeasyBase {
    /**
     * The function that the model called.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "function" })
    @Type(() => FunctionT)
    function: FunctionT;

    /**
     * The ID of the tool call.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The type of the tool. Currently, only `function` is supported.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: TypeT;
}
