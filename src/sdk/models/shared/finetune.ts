/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FineTuneEvent } from "./finetuneevent";
import { OpenAIFile } from "./openaifile";
import { Expose, Type } from "class-transformer";

/**
 * The hyperparameters used for the fine-tuning job. See the [Fine-tuning Guide](/docs/guides/fine-tuning/hyperparameters) for more details.
 */
export class FineTuneHyperparams extends SpeakeasyBase {
    /**
     * The batch size to use for training. The batch size is the number of
     *
     * @remarks
     * training examples used to train a single forward and backward pass.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "batch_size" })
    batchSize: number;

    /**
     * The number of classes to use for computing classification metrics.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "classification_n_classes" })
    classificationNClasses?: number;

    /**
     * The positive class to use for computing classification metrics.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "classification_positive_class" })
    classificationPositiveClass?: string;

    /**
     * The classification metrics to compute using the validation dataset at the end of every epoch.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "compute_classification_metrics" })
    computeClassificationMetrics?: boolean;

    /**
     * The learning rate multiplier to use for training.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "learning_rate_multiplier" })
    learningRateMultiplier: number;

    /**
     * The number of epochs to train the model for. An epoch refers to one
     *
     * @remarks
     * full cycle through the training dataset.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "n_epochs" })
    nEpochs: number;

    /**
     * The weight to use for loss on the prompt tokens.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "prompt_loss_weight" })
    promptLossWeight: number;
}

/**
 * The `FineTune` object represents a fine-tuning job that has been created through the API.
 *
 * @remarks
 *
 */
export class FineTune extends SpeakeasyBase {
    /**
     * The unix timestamp for when the fine-tuning job was created.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    createdAt: number;

    /**
     * The list of events that have been observed in the lifecycle of the FineTune job.
     */
    @SpeakeasyMetadata({ elemType: FineTuneEvent })
    @Expose({ name: "events" })
    @Type(() => FineTuneEvent)
    events?: FineTuneEvent[];

    /**
     * The name of the fine-tuned model that is being created.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "fine_tuned_model" })
    fineTunedModel: string;

    /**
     * The hyperparameters used for the fine-tuning job. See the [Fine-tuning Guide](/docs/guides/fine-tuning/hyperparameters) for more details.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "hyperparams" })
    @Type(() => FineTuneHyperparams)
    hyperparams: FineTuneHyperparams;

    /**
     * The object identifier, which can be referenced in the API endpoints.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The base model that is being fine-tuned.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "model" })
    model: string;

    /**
     * The object type, which is always "fine-tune".
     */
    @SpeakeasyMetadata()
    @Expose({ name: "object" })
    object: string;

    /**
     * The organization that owns the fine-tuning job.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "organization_id" })
    organizationId: string;

    /**
     * The compiled results files for the fine-tuning job.
     */
    @SpeakeasyMetadata({ elemType: OpenAIFile })
    @Expose({ name: "result_files" })
    @Type(() => OpenAIFile)
    resultFiles: OpenAIFile[];

    /**
     * The current status of the fine-tuning job, which can be either `created`, `pending`, `running`, `succeeded`, `failed`, or `cancelled`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status: string;

    /**
     * The list of files used for training.
     */
    @SpeakeasyMetadata({ elemType: OpenAIFile })
    @Expose({ name: "training_files" })
    @Type(() => OpenAIFile)
    trainingFiles: OpenAIFile[];

    /**
     * The unix timestamp for when the fine-tuning job was last updated.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    updatedAt: number;

    /**
     * The list of files used for validation.
     */
    @SpeakeasyMetadata({ elemType: OpenAIFile })
    @Expose({ name: "validation_files" })
    @Type(() => OpenAIFile)
    validationFiles: OpenAIFile[];
}
