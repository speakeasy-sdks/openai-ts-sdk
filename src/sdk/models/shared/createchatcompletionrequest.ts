/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChatCompletionFunctions } from "./chatcompletionfunctions";
import { ChatCompletionTool } from "./chatcompletiontool";
import { Expose, Type } from "class-transformer";

/**
 * Must be one of `text` or `json_object`.
 */
export enum CreateChatCompletionRequestType {
    Text = "text",
    JsonObject = "json_object",
}

/**
 * An object specifying the format that the model must output. Compatible with `gpt-4-1106-preview` and `gpt-3.5-turbo-1106`.
 *
 * @remarks
 *
 * Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
 *
 * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
 *
 */
export class ResponseFormat extends SpeakeasyBase {
    /**
     * Must be one of `text` or `json_object`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: CreateChatCompletionRequestType;
}

export class CreateChatCompletionRequest extends SpeakeasyBase {
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     *
     * @remarks
     *
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "frequency_penalty" })
    frequencyPenalty?: number;

    /**
     * Deprecated in favor of `tool_choice`.
     *
     * @remarks
     *
     * Controls which (if any) function is called by the model.
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
     *
     * `none` is the default when no functions are present. `auto` is the default if functions are present.
     *
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "function_call" })
    functionCall?: any;

    /**
     * Deprecated in favor of `tools`.
     *
     * @remarks
     *
     * A list of functions the model may generate JSON inputs for.
     *
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata({ elemType: ChatCompletionFunctions })
    @Expose({ name: "functions" })
    @Type(() => ChatCompletionFunctions)
    functions?: ChatCompletionFunctions[];

    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     *
     * @remarks
     *
     * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "logit_bias" })
    logitBias?: Record<string, number>;

    /**
     * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. This option is currently not available on the `gpt-4-vision-preview` model.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "logprobs" })
    logprobs?: boolean;

    /**
     * The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.
     *
     * @remarks
     *
     * The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "max_tokens" })
    maxTokens?: number;

    /**
     * A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
     */
    @SpeakeasyMetadata()
    @Expose({ name: "messages" })
    messages: any[];

    /**
     * ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "model" })
    model: any;

    /**
     * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "n" })
    n?: number;

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     *
     * @remarks
     *
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "presence_penalty" })
    presencePenalty?: number;

    /**
     * An object specifying the format that the model must output. Compatible with `gpt-4-1106-preview` and `gpt-3.5-turbo-1106`.
     *
     * @remarks
     *
     * Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
     *
     * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "response_format" })
    @Type(() => ResponseFormat)
    responseFormat?: ResponseFormat;

    /**
     * This feature is in Beta.
     *
     * @remarks
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "seed" })
    seed?: number;

    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "stop" })
    stop?: any;

    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "stream" })
    stream?: boolean;

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     *
     * @remarks
     *
     * We generally recommend altering this or `top_p` but not both.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "temperature" })
    temperature?: number;

    /**
     * Controls which (if any) function is called by the model.
     *
     * @remarks
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via `{"type: "function", "function": {"name": "my_function"}}` forces the model to call that function.
     *
     * `none` is the default when no functions are present. `auto` is the default if functions are present.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "tool_choice" })
    toolChoice?: any;

    /**
     * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ elemType: ChatCompletionTool })
    @Expose({ name: "tools" })
    @Type(() => ChatCompletionTool)
    tools?: ChatCompletionTool[];

    /**
     * An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "top_logprobs" })
    topLogprobs?: number;

    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     *
     * @remarks
     *
     * We generally recommend altering this or `temperature` but not both.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "top_p" })
    topP?: number;

    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    user?: string;
}
