/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChatCompletionRequestMessage } from "./chatcompletionrequestmessage";
import { Expose, Type } from "class-transformer";

export class CreateChatCompletionRequest extends SpeakeasyBase {
    /**
     * completions_frequency_penalty_description
     */
    @SpeakeasyMetadata()
    @Expose({ name: "frequency_penalty" })
    frequencyPenalty?: number;

    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     *
     * @remarks
     *
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "logit_bias" })
    logitBias?: Record<string, any>;

    /**
     * The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "max_tokens" })
    maxTokens?: number;

    /**
     * The messages to generate chat completions for, in the [chat format](/docs/guides/chat/introduction).
     */
    @SpeakeasyMetadata({ elemType: ChatCompletionRequestMessage })
    @Expose({ name: "messages" })
    @Type(() => ChatCompletionRequestMessage)
    messages: ChatCompletionRequestMessage[];

    /**
     * ID of the model to use. Currently, only `gpt-3.5-turbo` and `gpt-3.5-turbo-0301` are supported.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "model" })
    model: string;

    /**
     * How many chat completion choices to generate for each input message.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "n" })
    n?: number;

    /**
     * completions_presence_penalty_description
     */
    @SpeakeasyMetadata()
    @Expose({ name: "presence_penalty" })
    presencePenalty?: number;

    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "stop" })
    stop?: any;

    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "stream" })
    stream?: boolean;

    /**
     * completions_temperature_description
     */
    @SpeakeasyMetadata()
    @Expose({ name: "temperature" })
    temperature?: number;

    /**
     * completions_top_p_description
     */
    @SpeakeasyMetadata()
    @Expose({ name: "top_p" })
    topP?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    user?: any;
}
