/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

export class CreateImageVariationRequestImage extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "multipart_form, content=true" })
    content: Uint8Array;

    @SpeakeasyMetadata({ data: "multipart_form, name=image" })
    fileName: string;
}

/**
 * The format in which the generated images are returned. Must be one of `url` or `b64_json`.
 */
export enum CreateImageVariationRequestResponseFormat {
    Url = "url",
    B64Json = "b64_json",
}

/**
 * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
 */
export enum CreateImageVariationRequestSize {
    TwoHundredAndFiftySixx256 = "256x256",
    FiveHundredAndTwelvex512 = "512x512",
    OneThousandAndTwentyFourx1024 = "1024x1024",
}

export class CreateImageVariationRequest extends SpeakeasyBase {
    /**
     * The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
     */
    @SpeakeasyMetadata({ data: "multipart_form, file=true" })
    image: CreateImageVariationRequestImage;

    /**
     * The model to use for image generation. Only `dall-e-2` is supported at this time.
     */
    @SpeakeasyMetadata({ data: "multipart_form, name=model" })
    model?: any;

    /**
     * The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
     */
    @SpeakeasyMetadata({ data: "multipart_form, name=n" })
    n?: number;

    /**
     * The format in which the generated images are returned. Must be one of `url` or `b64_json`.
     */
    @SpeakeasyMetadata({ data: "multipart_form, name=response_format" })
    responseFormat?: CreateImageVariationRequestResponseFormat;

    /**
     * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
     */
    @SpeakeasyMetadata({ data: "multipart_form, name=size" })
    size?: CreateImageVariationRequestSize;

    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ data: "multipart_form, name=user" })
    user?: string;
}
