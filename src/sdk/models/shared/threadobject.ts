/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
 *
 * @remarks
 *
 */
export class ThreadObjectMetadata extends SpeakeasyBase {}

/**
 * The object type, which is always `thread`.
 */
export enum ThreadObjectObject {
    Thread = "thread",
}

/**
 * Represents a thread that contains [messages](/docs/api-reference/messages).
 */
export class ThreadObject extends SpeakeasyBase {
    /**
     * The Unix timestamp (in seconds) for when the thread was created.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    createdAt: number;

    /**
     * The identifier, which can be referenced in API endpoints.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => ThreadObjectMetadata)
    metadata: ThreadObjectMetadata;

    /**
     * The object type, which is always `thread`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "object" })
    object: ThreadObjectObject;
}
